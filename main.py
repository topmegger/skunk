from telegram import (
    Update, ReplyKeyboardMarkup, ReplyKeyboardRemove, KeyboardButton,
    InlineKeyboardMarkup, InlineKeyboardButton, InputMediaPhoto
)
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler,
    CallbackQueryHandler, ConversationHandler, ContextTypes, filters
)
import logging
from telegram.error import BadRequest

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –®–∞–≥–∏ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
MODEL, PHOTOS, SCREEN, BODY, REPAIR, BATTERY, MALFUNCTION, COMPLETENESS, COMMENTS, METRO, CONFIRM = range(11)

# –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ
TOKEN = "7944685358:AAEL_XQIC5CYz9hsiJCurLQmYqVyoGQddGo"
ADMIN_CHAT_ID = 758347965

# –•—Ä–∞–Ω–∏–ª–∏—â–∞
requests_db = {}     # req_id ‚Üí –¥–∞–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏
chat_sessions = {}   # user_id ‚Üí req_id
next_req_id = 1

async def start(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    kb = ReplyKeyboardMarkup([["–û—Ü–µ–Ω–∏—Ç—å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ"]], resize_keyboard=True)
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –ø—Ä–æ–¥–∞–∂—É iPhone, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:", reply_markup=kb)
    return MODEL

async def model_step(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    if update.message.text != "–û—Ü–µ–Ω–∏—Ç—å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ":
        return MODEL
    await update.message.reply_text(
        "1Ô∏è‚É£ –£–∫–∞–∂–∏—Ç–µ –º–æ–¥–µ–ª—å –∏ –æ–±—ä—ë–º –ø–∞–º—è—Ç–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä: iPhone 12 Pro 256 GB):",
        reply_markup=ReplyKeyboardRemove()
    )
    return PHOTOS

async def photo_handler(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    # —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏
    if text and 'model' not in ctx.user_data and text != "–ì–æ—Ç–æ–≤–æ":
        ctx.user_data['model'] = text
        ctx.user_data['photos'] = []
        kb = ReplyKeyboardMarkup([[KeyboardButton("–ì–æ—Ç–æ–≤–æ")]], resize_keyboard=True)
        await update.message.reply_text(
            "‚úÖ –ú–æ–¥–µ–ª—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞.\nüì∏ –ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ —Å–æ –≤—Å–µ—Ö —Å—Ç–æ—Ä–æ–Ω. –ö–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ ‚Äî –Ω–∞–∂–º–∏—Ç–µ ¬´–ì–æ—Ç–æ–≤–æ¬ª.",
            reply_markup=kb
        )
        return PHOTOS
    # –∫–Ω–æ–ø–∫–∞ –ì–æ—Ç–æ–≤–æ
    if text == "–ì–æ—Ç–æ–≤–æ":
        photos = ctx.user_data.get('photos', [])
        if not photos:
            await update.message.reply_text("‚ö†Ô∏è –ù—É–∂–Ω–æ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ —Ñ–æ—Ç–æ.")
            return PHOTOS
        await update.message.reply_text("üëç –§–æ—Ç–æ –ø–æ–ª—É—á–µ–Ω—ã.", reply_markup=ReplyKeyboardRemove())
        # —ç–∫—Ä–∞–Ω
        buttons = [
            InlineKeyboardButton("–ë–µ–∑ –¥–µ—Ñ–µ–∫—Ç–æ–≤", callback_data="screen_0"),
            InlineKeyboardButton("1‚Äì2 –º–µ–ª–∫–∏–µ —Ü–∞—Ä–∞–ø–∏–Ω—ã", callback_data="screen_1"),
            InlineKeyboardButton("–ú–Ω–æ–≥–æ –º–µ–ª–∫–∏—Ö —Ü–∞—Ä–∞–ø–∏–Ω", callback_data="screen_2"),
            InlineKeyboardButton("–ì–ª—É–±–æ–∫–∏–µ —Ü–∞—Ä–∞–ø–∏–Ω—ã", callback_data="screen_3"),
            InlineKeyboardButton("–ü—è—Ç–Ω–∞/–±–ª–∏–∫–∏/–≤—ã–≥–æ—Ä–∞–Ω–∏–µ", callback_data="screen_4"),
            InlineKeyboardButton("–ü–æ–ª–æ—Å—ã –∏ –±–∏—Ç—ã–µ –ø–∏–∫—Å–µ–ª–∏", callback_data="screen_5"),
        ]
        kb = InlineKeyboardMarkup([buttons[0:2], buttons[2:4], buttons[4:6]])
        await update.message.reply_text("2Ô∏è‚É£ –°–æ—Å—Ç–æ—è–Ω–∏–µ —ç–∫—Ä–∞–Ω–∞:", reply_markup=kb)
        return SCREEN
    # —Ñ–æ—Ç–æ
    if update.message.photo:
        fid = update.message.photo[-1].file_id
        ctx.user_data.setdefault('photos', []).append(fid)
        await update.message.reply_text(f"–§–æ—Ç–æ –ø—Ä–∏–Ω—è—Ç–æ (–≤—Å–µ–≥–æ {len(ctx.user_data['photos'])}).")
        return PHOTOS
    # –≤—Å—ë –æ—Å—Ç–∞–ª—å–Ω–æ–µ
    kb = ReplyKeyboardMarkup([[KeyboardButton("–ì–æ—Ç–æ–≤–æ")]], resize_keyboard=True)
    await update.message.reply_text("–ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ ¬´–ì–æ—Ç–æ–≤–æ¬ª", reply_markup=kb)
    return PHOTOS

async def screen_handler(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    try: await update.callback_query.answer()
    except BadRequest: pass
    idx = int(update.callback_query.data.split("_")[1])
    opts = ["–ë–µ–∑ –¥–µ—Ñ–µ–∫—Ç–æ–≤","1‚Äì2 –º–µ–ª–∫–∏–µ —Ü–∞—Ä–∞–ø–∏–Ω—ã","–ú–Ω–æ–≥–æ –º–µ–ª–∫–∏—Ö —Ü–∞—Ä–∞–ø–∏–Ω",
            "–ì–ª—É–±–æ–∫–∏–µ —Ü–∞—Ä–∞–ø–∏–Ω—ã","–ü—è—Ç–Ω–∞/–±–ª–∏–∫–∏/–≤—ã–≥–æ—Ä–∞–Ω–∏–µ","–ü–æ–ª–æ—Å—ã –∏ –±–∏—Ç—ã–µ –ø–∏–∫—Å–µ–ª–∏"]
    ctx.user_data['screen'] = opts[idx]
    buttons = [
        InlineKeyboardButton("–ë–µ–∑ –¥–µ—Ñ–µ–∫—Ç–æ–≤", callback_data="body_0"),
        InlineKeyboardButton("–ú–µ–ª–∫–∏–µ —Ü–∞—Ä–∞–ø–∏–Ω—ã", callback_data="body_1"),
        InlineKeyboardButton("–ì–ª—É–±–æ–∫–∏–µ —Ü–∞—Ä–∞–ø–∏–Ω—ã", callback_data="body_2"),
        InlineKeyboardButton("–°–∫–æ–ª—ã/—Ç—Ä–µ—â–∏–Ω—ã", callback_data="body_3"),
        InlineKeyboardButton("–©–µ–ª–∏/–∑–∞–∑–æ—Ä—ã", callback_data="body_4"),
        InlineKeyboardButton("–ò–∑–≥–∏–±/–≤–º—è—Ç–∏–Ω—ã", callback_data="body_5"),
    ]
    kb = InlineKeyboardMarkup([buttons[0:2], buttons[2:4], buttons[4:6]])
    await update.callback_query.message.reply_text("3Ô∏è‚É£ –°–æ—Å—Ç–æ—è–Ω–∏–µ –∫–æ—Ä–ø—É—Å–∞:", reply_markup=kb)
    return BODY

async def body_handler(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    try: await update.callback_query.answer()
    except BadRequest: pass
    idx = int(update.callback_query.data.split("_")[1])
    opts = ["–ë–µ–∑ –¥–µ—Ñ–µ–∫—Ç–æ–≤","–ú–µ–ª–∫–∏–µ —Ü–∞—Ä–∞–ø–∏–Ω—ã","–ì–ª—É–±–æ–∫–∏–µ —Ü–∞—Ä–∞–ø–∏–Ω—ã",
            "–°–∫–æ–ª—ã/—Ç—Ä–µ—â–∏–Ω—ã","–©–µ–ª–∏/–∑–∞–∑–æ—Ä—ã","–ò–∑–≥–∏–±/–≤–º—è—Ç–∏–Ω—ã"]
    ctx.user_data['body'] = opts[idx]
    await update.callback_query.message.reply_text(
        "4Ô∏è‚É£ –ë—ã–ª–∏ –ª–∏ —Ä–µ–º–æ–Ω—Ç—ã? –ï—Å–ª–∏ –±—ã–ª–∏ ‚Äî –æ–ø–∏—à–∏—Ç–µ –∫–∞–∫–∏–µ, –∏–Ω–∞—á–µ ‚Äî ¬´–Ω–µ—Ç¬ª."
    )
    return REPAIR

async def repair_step(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    ctx.user_data['repair'] = update.message.text
    await update.message.reply_text("5Ô∏è‚É£ –°–æ—Å—Ç–æ—è–Ω–∏–µ –∞–∫–∫—É–º—É–ª—è—Ç–æ—Ä–∞ (–ø—Ä–æ—Ü–µ–Ω—Ç/–æ–ø–∏—Å–∞–Ω–∏–µ):")
    return BATTERY

async def battery_step(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    ctx.user_data['battery'] = update.message.text
    await update.message.reply_text("6Ô∏è‚É£ –ù–µ–∏—Å–ø—Ä–∞–≤–Ω–æ—Å—Ç–∏ (–µ—Å–ª–∏ –µ—Å—Ç—å ‚Äî –ø–µ—Ä–µ—á–∏—Å–ª–∏—Ç–µ; –µ—Å–ª–∏ –Ω–µ—Ç ‚Äî ¬´–Ω–µ—Ç¬ª):")
    return MALFUNCTION

async def malfunction_step(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    ctx.user_data['malfunction'] = update.message.text
    await update.message.reply_text("7Ô∏è‚É£ –ß—Ç–æ –≤ –∫–æ–º–ø–ª–µ–∫—Ç–µ? (–∫–æ—Ä–æ–±–∫–∞, –ø—Ä–æ–≤–æ–¥, —á–µ–∫‚Ä¶):")
    return COMPLETENESS

async def completeness_step(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    ctx.user_data['completeness'] = update.message.text
    await update.message.reply_text("8Ô∏è‚É£ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ):")
    return COMMENTS

async def comments_step(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    ctx.user_data['comments'] = update.message.text
    await update.message.reply_text("9Ô∏è‚É£ –£–∫–∞–∂–∏—Ç–µ –±–ª–∏–∂–∞–π—à—É—é —Å—Ç–∞–Ω—Ü–∏—é –º–µ—Ç—Ä–æ –≤ –ú–æ—Å–∫–≤–µ:")
    return METRO

async def metro_step(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    ctx.user_data['metro'] = update.message.text
    data = ctx.user_data
    summary = (
        f"–ú–æ–¥–µ–ª—å/–ø–∞–º—è—Ç—å: {data['model']}\n"
        f"–§–æ—Ç–æ: {len(data['photos'])} —à—Ç.\n"
        f"–≠–∫—Ä–∞–Ω: {data['screen']}\n"
        f"–ö–æ—Ä–ø—É—Å: {data['body']}\n"
        f"–†–µ–º–æ–Ω—Ç—ã: {data['repair']}\n"
        f"–ê–∫–∫—É–º.: {data['battery']}\n"
        f"–ù–µ–∏—Å–ø—Ä–∞–≤–Ω–æ—Å—Ç–∏: {data['malfunction']}\n"
        f"–ö–æ–º–ø–ª–µ–∫—Ç: {data['completeness']}\n"
        f"–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏: {data['comments'] or '‚Äî'}\n"
        f"–ú–µ—Ç—Ä–æ: {data['metro']}"
    )
    kb = InlineKeyboardMarkup([[
        InlineKeyboardButton("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm_yes"),
        InlineKeyboardButton("–û—Ç–º–µ–Ω–∏—Ç—å", callback_data="confirm_no"),
    ]])
    await update.message.reply_text("üîü –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∑–∞—è–≤–∫—É –∏ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ:\n\n" + summary, reply_markup=kb)
    return CONFIRM

async def confirm_handler(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    try: await update.callback_query.answer()
    except BadRequest: pass
    if update.callback_query.data == "confirm_no":
        await update.callback_query.message.reply_text("–û—Ç–º–µ–Ω–µ–Ω–æ. –î–ª—è –Ω–æ–≤–æ–π –∑–∞—è–≤–∫–∏ ‚Äî /start")
        return ConversationHandler.END

    global next_req_id
    rid = next_req_id; next_req_id += 1
    requests_db[rid] = {"user_id": update.callback_query.from_user.id, **ctx.user_data}
    chat_sessions[update.callback_query.from_user.id] = rid

    data = requests_db[rid]
    txt = (
        f"–ó–∞—è–≤–∫–∞ #{rid}\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{update.callback_query.from_user.username}\n\n"
        f"–ú–æ–¥–µ–ª—å/–ø–∞–º—è—Ç—å: {data['model']}\n–≠–∫—Ä–∞–Ω: {data['screen']}\n"
        f"–ö–æ—Ä–ø—É—Å: {data['body']}\n–†–µ–º–æ–Ω—Ç—ã: {data['repair']}\n"
        f"–ê–∫–∫—É–º.: {data['battery']}\n–ù–µ–∏—Å–ø—Ä–∞–≤–Ω–æ—Å—Ç–∏: {data['malfunction']}\n"
        f"–ö–æ–º–ø–ª–µ–∫—Ç: {data['completeness']}\n–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏: {data['comments'] or '‚Äî'}\n"
        f"–ú–µ—Ç—Ä–æ: {data['metro']}"
    )
    btn = InlineKeyboardMarkup([[InlineKeyboardButton("–û—Ç–≤–µ—Ç–∏—Ç—å", callback_data=f"answer_{rid}")]])
    await ctx.bot.send_message(ADMIN_CHAT_ID, txt, reply_markup=btn)
    media = [InputMediaPhoto(fid) for fid in data['photos']]
    await ctx.bot.send_media_group(ADMIN_CHAT_ID, media)

    await update.callback_query.message.reply_text(
        "–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞! –ú–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏."
    )
    return ConversationHandler.END

async def forward_to_admin(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    uid = update.message.from_user.id
    if uid not in chat_sessions:
        return
    rid = chat_sessions[uid]
    kb = InlineKeyboardMarkup([[InlineKeyboardButton("–û—Ç–≤–µ—Ç–∏—Ç—å", callback_data=f"answer_{rid}")]])
    if update.message.text:
        await ctx.bot.send_message(ADMIN_CHAT_ID, f"[#{rid}] {update.message.text}", reply_markup=kb)
    elif update.message.photo:
        await ctx.bot.send_photo(ADMIN_CHAT_ID, update.message.photo[-1].file_id,
                                 caption=f"[#{rid}] –§–æ—Ç–æ", reply_markup=kb)

async def answer_callback(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    try: await update.callback_query.answer()
    except BadRequest: pass
    rid = int(update.callback_query.data.split("_")[1])
    ctx.user_data['rid'] = rid
    await update.callback_query.message.reply_text(f"–í–≤–µ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç –¥–ª—è –∑–∞—è–≤–∫–∏ #{rid}:")
    return 100

async def admin_reply(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    rid = ctx.user_data.get('rid')
    if rid not in requests_db:
        await update.message.reply_text("–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return ConversationHandler.END
    await ctx.bot.send_message(requests_db[rid]['user_id'], f"–û—Ç–≤–µ—Ç –ø–æ –∑–∞—è–≤–∫–µ #{rid}:\n\n{update.message.text}")
    await update.message.reply_text("–û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.")
    return ConversationHandler.END

async def error_handler(update: object, context: ContextTypes.DEFAULT_TYPE):
    logger.error("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞:", exc_info=context.error)

def main():
    app = ApplicationBuilder().token(TOKEN).build()

    user_conv = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            MODEL:      [MessageHandler(filters.TEXT & ~filters.COMMAND, model_step)],
            PHOTOS:     [MessageHandler(filters.PHOTO | (filters.TEXT & ~filters.COMMAND), photo_handler)],
            SCREEN:     [CallbackQueryHandler(screen_handler, pattern="^screen_")],
            BODY:       [CallbackQueryHandler(body_handler, pattern="^body_")],
            REPAIR:     [MessageHandler(filters.TEXT & ~filters.COMMAND, repair_step)],
            BATTERY:    [MessageHandler(filters.TEXT & ~filters.COMMAND, battery_step)],
            MALFUNCTION:[MessageHandler(filters.TEXT & ~filters.COMMAND, malfunction_step)],
            COMPLETENESS:[MessageHandler(filters.TEXT & ~filters.COMMAND, completeness_step)],
            COMMENTS:   [MessageHandler(filters.TEXT & ~filters.COMMAND, comments_step)],
            METRO:      [MessageHandler(filters.TEXT & ~filters.COMMAND, metro_step)],
            CONFIRM:    [CallbackQueryHandler(confirm_handler, pattern="^confirm_")],
        },
        fallbacks=[]
    )

    admin_conv = ConversationHandler(
        entry_points=[CallbackQueryHandler(answer_callback, pattern="^answer_")],
        states={100: [MessageHandler(filters.TEXT & ~filters.COMMAND, admin_reply)]},
        fallbacks=[]
    )

    app.add_handler(user_conv)
    app.add_handler(admin_conv)
    app.add_handler(MessageHandler(filters.ALL & ~filters.COMMAND, forward_to_admin), group=1)
    app.add_error_handler(error_handler)

    app.run_polling()

if __name__ == "__main__":
    main()
